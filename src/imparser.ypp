%skeleton "lalr1.cc"
%require "3.0.4"
%defines
%locations

%define parser_class_name {imparser}
%define api.value.type variant
%define api.token.constructor
%define parse.assert
%define parse.trace
%define parse.error verbose
%define api.token.prefix {TOK_}

%code requires
{
    #include "ast.hpp"
    #include <string>
    #include <vector>
    #include <cstdint>
    class imdriver;
}

%param { imdriver& driver }
%printer { yyoutput << $$; } <*>;

%initial-action
{
    // Initialize the initial location
    @$.begin.filename = @$.end.filename = &driver.streamname;
}

%code
{
    #include "ast.hpp"
    #include "imdriver.hpp"
    #include "imlexer.hpp"
    #include <sstream>
    #undef yylex
    #define yylex driver.lexer->lex
}

// Tokens
%token
    END     0   "end of file"
    NEWLINE 10  "newline"
    // Keywords
    END_KEYW    "end"
    FOR_KEYW    "for"
    IF_KEYW     "if"
    IN_KEYW     "in"
    ARGS_KEYW   "args"
    // Symbols
    DOT         "."
    DOUBLEDOT   ".."
    STAR        "*"
    LPAREN      "("
    RPAREN      ")"
    DIM_SEP     "x"
    BANG        "!"

// Token types
%token <std::string>    COND_SYM "conditional symbol (!! == <= >= < >)"
%token <int64_t>        NUMBER "number"
%token <int64_t>        COLOR "color"
%token <std::string>    STRING "string"
%token <std::string>    IDENTIFIER "identifier"

// Rule types
%type <ast::line_list_p>        lines
%type <ast::line_list_p>        lines_tail
%type <ast::exec_p>             line
%type <ast::conditional_p>      conditional
%type <ast::expr_p>             expr
%type <ast::for_stmt_p>         for_stmt
%type <ast::funcall_p>          funcall
%type <ast::funcall_p>          funcall_inner
%type <ast::args_list_p>        args_list
%type <ast::dimension_p>        dimension
%type <ast::qualified_id_p>     qualified_id
%type <ast::qualified_id_p>     qualified_id_tail
%type <ast::range_p>            range

%%

%start lines;

lines   : line lines_tail
            {
                $2->push_front($1);
                $$ = $2;
            }
        | %empty
            { $$ = std::make_shared<ast::line_list>(); }
        ;

lines_tail
        : NEWLINE lines
            { $$ = $2; }
        ;

line    : funcall
            { $$ = $1; }
        | for_stmt
            { $$ = $1; }
        | if_stmt
            { $$ = nullptr; }
        ;

conditional
        : expr COND_SYM expr
            { $$ = std::make_shared<ast::lr_conditional>($1, $3); }
        | funcall_inner
            { $$ = std::make_shared<ast::funcall_conditional>($1); }
        | BANG conditional
            { 
                $2->inverse = !$2->inverse;
                $$ = $2; 
            }
        ;

expr    : funcall_inner
            { $$ = $1; }
        | STRING
            { $$ = std::make_shared<ast::string_expr>($1); }
        | NUMBER
            { $$ = std::make_shared<ast::number_expr>($1);; }
        | COLOR
            { $$ = std::make_shared<ast::number_expr>($1);; }
        | qualified_id
            { $$ = $1; }
        | range
            { $$ = $1; }
        | dimension
            { $$ = $1; }
        ;

// for IDENTIFIER in {range}
//     ...
// end for
for_stmt:
        FOR_KEYW IDENTIFIER IN_KEYW expr NEWLINE 
            lines
        END_KEYW FOR_KEYW
            { $$ = std::make_shared<ast::for_stmt>($2, $4, $6); }
        ;

// if {conditional}
//     ...
// end if
if_stmt :
        IF_KEYW conditional NEWLINE
            lines
        END_KEYW IF_KEYW
        ;

funcall : IDENTIFIER args_list 
            { $$ = std::make_shared<ast::funcall>($1, $2); }
        ;

funcall_inner
        : IDENTIFIER LPAREN args_list RPAREN 
            { $$ = std::make_shared<ast::funcall>($1, $3); }
        ;

args_list
        : expr args_list {
            $2->push_front($1);
            $$ = $2;
        }
        | %empty
            { $$ = std::make_shared<ast::args_list>(); }
        ;

dimension
        : NUMBER DIM_SEP NUMBER
            { $$ = std::make_shared<ast::dimension>($1, $3); }
        ;

qualified_id
        : IDENTIFIER qualified_id_tail 
            { $$ = std::make_shared<ast::qualified_id>($1, $2); }
        ;

qualified_id_tail
        : DOT IDENTIFIER qualified_id_tail 
            { $$ = std::make_shared<ast::qualified_id>($2, $3); }
        | DOT NUMBER {
            std::stringstream ss;
            ss << $2;
            $$ = std::make_shared<ast::qualified_id>(ss.str(), nullptr);
        }
        | DOT STAR 
            { $$ = std::make_shared<ast::qualified_id>("*", nullptr); }
        | %empty 
            { $$ = nullptr; }
        ;

range   : NUMBER DOUBLEDOT NUMBER
            { $$ = std::make_shared<ast::range>($1, $3); }
        ;

%%

void yy::imparser::error(const location_type& l, const std::string& m)
{
    driver.error(l, m);
}
